<?php
namespace backend\modules\admin\controllers;


use Yii;
use yii\base\Model;
use backend\models\Vendoritem;
use backend\models\Vendor;
use backend\models\Image;
use backend\models\Category;
use backend\models\SubCategory;
use backend\models\VendoritemSearch;
use backend\models\Itemtype;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;


/**
 * VendoritemController implements the CRUD actions for Vendoritem model.
 */
class VendoritemController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    //'delete' => ['post'],
                ],
            ],
              'access' => [
               'class' => AccessControl::className(),
               'rules' => [
                   [  
						'actions' => [''],             
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [   
						'actions' => ['create', 'update','index', 'view','delete'],                     
                        'allow' => true,
                        'roles' => ['@'],
                    ],
               ],
           ],
        ];
    }

    /**
     * Lists all Vendoritem models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new VendoritemSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Vendoritem model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Vendoritem model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Vendoritem();
        $model1 = new Image();
        $base = Yii::$app->basePath;
		$len = rand(1,1000);
		$itemtype= Itemtype::loaditemtype();
        $vendorname= Vendor::loadvendorname();
        $categoryname= Category::loadcategoryname();
		$subcategory= Subcategory::loadsubcategoryname();


        if ($model->load(Yii::$app->request->post()) && $model1->load(Yii::$app->request->post()) && Model::validateMultiple([$model, $model1])) {
         $model->save();
         $itemid=$model->item_id;
			$file = UploadedFile::getInstances($model1, 'image_path');
            if ($file){
                foreach ($file as $files) {
                     $files->saveAs($base.'/web/uploads/vendor_images/' . $files->baseName . '_' . $len .'.' . $files->extension);
                }
            }
            
            if ($file) {
                foreach ($file as $files) {
                      $model1->image_path=$files->baseName . '_' . $len .'.' . $files->extension;
                      $model1->item_id=$itemid; 
					  $model1->image_user_id = Yii::$app->user->getId();// no need for validation rule on user_id as you set it yourself
					 $model1->image_user_type=1;
					 
					 $k= Yii::$app->db->createCommand()
	->insert('whitebook_image', [
			'image_path' => $model1->image_path,
			'item_id' => $itemid,
			'image_user_id' =>$model1->image_user_id,])
	->execute();
                }
            }
            
		    echo Yii::$app->session->setFlash('success', "Vendor Item Added successfully!");
            return $this->redirect(['index']);
        } else {
            return $this->render('create', [
                'model' => $model,'model1' => $model1,'itemtype'=>$itemtype,'vendorname'=>$vendorname,'categoryname'=>$categoryname,'subcategory'=>$subcategory,
            ]);
        }
    }

    /**
     * Updates an existing Vendoritem model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {	
         $model = $this->findModel($id);
         $model1 = new Image();
         $base = Yii::$app->basePath;
		 $len = rand(1,1000);
         $item_id=$model->item_id;
         $imagedata = Image::find()
        ->where('item_id = :item_id', [':item_id' => $item_id])->all();
        $cat_id=$model->category_id;
        $itemtype= Itemtype::loaditemtype();
        $vendorname= Vendor::loadvendorname();
        $categoryname= Category::loadcategoryname();
		$subcategory= Subcategory::loadsubcategory($cat_id);
		//**
		    if($model->load(Yii::$app->request->post()) && $model1->load(Yii::$app->request->post()) && Model::validateMultiple([$model, $model1])) {
			$model->save();
			$file = UploadedFile::getInstances($model1, 'image_path');    
            if ($file) {
                foreach ($file as $files) {
                     $files->saveAs($base.'/web/uploads/vendor_images/' . $files->baseName . '_' . $len .'.' . $files->extension);
                }
            }            
            if ($file) {
                foreach ($file as $files) {
                      $model1->image_path=$files->baseName . '_' . $len .'.' . $files->extension;
                      $model1->item_id=$id; 
					  $model1->image_user_id = Yii::$app->user->getId();// no need for validation rule on user_id as you set it yourself
					 $model1->image_user_type=1;
					 $k= Yii::$app->db->createCommand()
	->insert('whitebook_image', [
			'image_path' => $model1->image_path,
			'item_id' => $id,
			'image_user_id' =>$model1->image_user_id,])
	->execute();
                }
            }
             echo Yii::$app->session->setFlash('success', "Vendor Item Updated successfully!");
            return $this->redirect(['index']);
		}         
		else {
            return $this->render('update', [
                'model' => $model,'itemtype'=>$itemtype,'vendorname'=>$vendorname,'categoryname'=>$categoryname,'subcategory'=>$subcategory,
                'imagedata'=>$imagedata,'model1' => $model1,
            ]);
        }
    }

    /**
     * Deletes an existing Vendoritem model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();
		echo Yii::$app->session->setFlash('success', "Vendor Item Deleted successfully!");
        return $this->redirect(['index']);
    }

    public function actionCheck($image_id)
        {	
			$user = Image::findOne($image_id);
			$user->delete();
		}

    /**
     * Finds the Vendoritem model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Vendoritem the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Vendoritem::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

		public function actionBlock()
    {
		if(Yii::$app->request->isAjax)
		$data = Yii::$app->request->post();		
		$status = ($data['status'] == 'Active' ? 'Deactive' : 'Active'); 	
		$command = \Yii::$app->db->createCommand('UPDATE whitebook_vendor_item SET item_status="'.$status.'" WHERE item_id='.$data['id']);
		$command->execute();
		if($status == 'Active')
			return \Yii::$app->params['appImageUrl'].'active.png';
			return \Yii::$app->params['appImageUrl'].'inactive.png';
	}
}
